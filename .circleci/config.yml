version: 2.1
jobs:
  build-lint:
    docker:
      - image: circleci/python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: "Setup .env and run make"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env
            echo "== Run make =="
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: "Download and run lint"
          command: |
            . venv/bin/activate
            echo "== Download hadolint =="
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            echo "== Checking for hadolint =="
            hadolint -v
            echo "== Running lint =="
            make lint

  docker-build-test-upload:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Create .env file with project env variable API_KEY"
          command: |
            echo "== Setup required .env file =="
            touch .env
            echo "#.env" >> ".env"
            echo FLASK_APP=app.py >> ".env"
            echo FLASK_DEBUG=True >> ".env"
            echo API_KEY=$API_KEY >> ".env"
            echo "== Sanity check of .env file =="
            cat .env
      - run:
          name: "Docker Login, build and tag"
          command: |
            echo "== Login to docker with envirvonment variables =="
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            echo "== Build docker image =="
            docker build --tag=udacitycapstone .
            echo "== Check for image =="
            docker image ls --filter=reference='udacitycapstone'
      - run:
          name: "Tag & Push image to dockerhub"
          command: |
            echo "== Tag docker image for upload =="
            docker tag udacitycapstone $DOCKERHUB_USERNAME/udacitycapstone
            echo "== Upload docker image =="
            docker push $DOCKERHUB_USERNAME/udacitycapstone

  eks-setup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar, gzip & wget packages"
          command: |
            yum install -y tar gzip wget
      - run:
          name: "Download eksctl"
          command: |
            echo "== Check version and download if missing =="
            export EKSCTLCHECK=$(eksctl version)
            if [ -z "$EKSCTLCHECK" ]
            then
              echo "== eksctl not found, downloading =="
              wget https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz
              echo "== create temp folder =="
              mkdir eksctl
              echo "== extract the download =="
              tar -xf eksctl_Linux_amd64.tar.gz -C ./eksctl
              echo "== move eksctl to bin =="
              mv ./eksctl/eksctl /usr/local/bin
              echo "== check version =="
              eksctl version
            else
              echo "== eksctl found =="
              eksctl version
            fi
      - run:
          name: "Download kubectl"
          command: |
            echo "== Check version and download if missing =="
            export KUBECTLCHECK=$(kubectl version --short --client | grep 'Client Version' | awk '{print $3}')
            if [ -z "$KUBECTLCHECK" ]
            then
              echo "== kubectl not found, downloading =="
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              echo "== install kubectl =="
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              echo "== check version =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            else
              echo "== kubectl found =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            fi
      - run:
          name: "Confirm existing EKS cluster - deploy cluster if not found"
          no_output_timeout: 30m
          command: |
            echo "== Checking for eks cluster =="
            export ExistingCluster=($(aws eks list-clusters --output text | grep udacity | awk '{print $2}'))
            echo $ExistingCluster
            if [[ "$ExistingCluster" == "udacitycapstone" ]]
            then
              echo "== Cluster Found =="
            else
              echo "== Check AWS user after getting previous failure =="
              aws sts get-caller-identity
              echo "== No Cluster Found =="
              echo "Building cluster"
              eksctl create cluster -f eksyml/cluster.yml
            fi

  deploy-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar, gzip & wget packages"
          command: |
            yum install -y tar gzip wget
      - run:
          name: "Download eksctl"
          command: |
            echo "== Check version and download if missing =="
            export EKSCTLCHECK=$(eksctl version)
            if [ -z "$EKSCTLCHECK" ]
            then
              echo "== eksctl not found, downloading =="
              wget https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz
              echo "== create temp folder =="
              mkdir eksctl
              echo "== extract the download =="
              tar -xf eksctl_Linux_amd64.tar.gz -C ./eksctl
              echo "== move eksctl to bin =="
              mv ./eksctl/eksctl /usr/local/bin
              echo "== check version =="
              eksctl version
            else
              echo "== eksctl found =="
              eksctl version
            fi
      - run:
          name: "Download kubectl"
          command: |
            echo "== Check version and download if missing =="
            export KUBECTLCHECK=$(kubectl version --short --client | grep 'Client Version' | awk '{print $3}')
            if [ -z "$KUBECTLCHECK" ]
            then
              echo "== kubectl not found, downloading =="
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              echo "== install kubectl =="
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              echo "== check version =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            else
              echo "== kubectl found =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            fi
      - run:
          name: "Deploy to blue/green"
          command: |
            echo "== Update kubeconfig =="
            aws eks update-kubeconfig --name udacitycapstone
            echo "== Checking current deployment =="
            export EXISTINGBLUE=($(kubectl get deployments | grep udacitycapstone-blue | awk '{print $1}'))
            export EXISTINGGREEN=($(kubectl get deployments | grep udacitycapstone-green | awk '{print $1}'))
            if [[ -n "$EXISTINGGREEN" ]] && [[ -z "$EXISTINGBLUE" ]]
            then
             echo "== Deploying new app as BLUE =="
             kubectl apply -f eksyml/blue-deploy.yml
             sleep 60
             kubectl apply -f eksyml/blue-service.yml
             sleep 60
             echo "== Sanity checking status =="
             kubectl get deployments
             kubectl get pods
             kubectl get nodes
             kubectl get services
             echo "== Store new deployment =="
             curl -k https://kvdb.io/TbCZ6YEAqpcuxmXp56GbjJ/currentdeployment -d 'blue'
             echo "== Store new LB URL for app =="
             export AWSURL=($(kubectl get services | grep udacitycapstone-blue | awk '{print $4}'))
             curl -k https://kvdb.io/TbCZ6YEAqpcuxmXp56GbjJ/newawsurl -d $AWSURL
             echo "== Show new BLUE app URL =="
             echo "http://"${AWSURL}
            elif [[ -n "$EXISTINGBLUE" ]] && [[ -z "$EXISTINGGREEN" ]]
            then
             echo "== Deploying new app as GREEN =="
             kubectl apply -f eksyml/green-deploy.yml
             sleep 60
             kubectl apply -f eksyml/green-service.yml
             sleep 60
             echo "== Sanity checking status =="
             kubectl get deployments
             kubectl get pods
             kubectl get nodes
             kubectl get services
             echo "== Store new deployment =="
             curl -k https://kvdb.io/TbCZ6YEAqpcuxmXp56GbjJ/currentdeployment -d 'green'
             echo "== Store new LB URL for app =="
             export AWSURL=($(kubectl get services | grep udacitycapstone-green | awk '{print $4}'))
             curl -k https://kvdb.io/TbCZ6YEAqpcuxmXp56GbjJ/newawsurl -d $AWSURL
             echo "== Show new GREEN app URL =="
             echo "http://"${AWSURL}
            else
             echo "== Cannot validate last deployment - need to investigate =="
            fi

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar, gzip & wget packages"
          command: |
            yum install -y tar gzip wget
      - run:
          name: "Smoke test new app"
          no_output_timeout: 30m
          command: |
            echo "== Waiting 5 mins before smoke test =="
            sleep 300
            echo "== Grab latest app AWS LB URL =="
            export AWSURL=$(curl -s -k https://kvdb.io/TbCZ6YEAqpcuxmXp56GbjJ/newawsurl)
            echo "Testing: " ${AWSURL}
            export AWSAPPTEST=$(curl -L -s $AWSURL | grep '<title>Udacity Capstone</title>')
            if [[ "$AWSAPPTEST" == *Capstone* ]]
            then
             echo "== App test successful =="
            else
             echo "== App failure - please investigate =="
            fi

  clean-up-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar, gzip & wget packages"
          command: |
            yum install -y tar gzip wget
      - run:
          name: "Download eksctl"
          command: |
            echo "== Check version and download if missing =="
            export EKSCTLCHECK=$(eksctl version)
            if [ -z "$EKSCTLCHECK" ]
            then
              echo "== eksctl not found, downloading =="
              wget https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz
              echo "== create temp folder =="
              mkdir eksctl
              echo "== extract the download =="
              tar -xf eksctl_Linux_amd64.tar.gz -C ./eksctl
              echo "== move eksctl to bin =="
              mv ./eksctl/eksctl /usr/local/bin
              echo "== check version =="
              eksctl version
            else
              echo "== eksctl found =="
              eksctl version
            fi
      - run:
          name: "Download kubectl"
          command: |
            echo "== Check version and download if missing =="
            export KUBECTLCHECK=$(kubectl version --short --client | grep 'Client Version' | awk '{print $3}')
            if [ -z "$KUBECTLCHECK" ]
            then
              echo "== kubectl not found, downloading =="
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              echo "== install kubectl =="
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              echo "== check version =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            else
              echo "== kubectl found =="
              kubectl version --short --client | grep 'Client Version' | awk '{print $3}'
            fi
      - run:
          name: "Cleanup old blue/green deployment"
          command: |
            echo "== Update kubeconfig =="
            aws eks update-kubeconfig --name udacitycapstone
            echo "== Grabbing latest deployment =="
            export NEWDEPLOY=$(curl -s -k https://kvdb.io/TbCZ6YEAqpcuxmXp56GbjJ/currentdeployment)
            echo "New deployment was:" ${NEWDEPLOY}
            echo
            export OLDBLUE=($(kubectl get deployments | grep udacitycapstone-blue | awk '{print $1}'))
            export OLDGREEN=($(kubectl get deployments | grep udacitycapstone-green | awk '{print $1}'))
            if [[ "$NEWDEPLOY" == green ]] && [[ -n "$OLDBLUE" ]]
            then
             echo "== Cleanup of old BLUE deployment required =="
             echo "== Deleting old service / deployment now =="
             kubectl delete -f eksyml/blue-service.yml
             sleep 60
             kubectl delete -f eksyml/blue-deploy.yml
             sleep 60
            elif [[ "$NEWDEPLOY" == blue ]] && [[ -n "$OLDGREEN" ]]
            then
             echo "== Cleanup of old GREEN deployment required =="
             echo "== Deleting old service / deployment now =="
             kubectl delete -f eksyml/green-service.yml
             sleep 60
             kubectl delete -f eksyml/green-deploy.yml
             sleep 60
            else
             echo "== No old BLUE deployment found to cleanup =="
            fi
            echo "== Sanity checking service / deployment =="
            kubectl get deployments
            kubectl get services
            kubectl get pods
            kubectl get nodes

# If grep og clustercleanup.txt = yes
# eksctl delete cluster -f eksyml/cluster.yml 

workflows:
  default:
    jobs:
      - build-lint
      - docker-build-test-upload:
          requires: [build-lint]
      - eks-setup:
          requires: [docker-build-test-upload]
      - deploy-app:
          requires: [eks-setup]
      - smoke-test:
          requires: [deploy-app]
      - clean-up-app:
          requires: [smoke-test]
#      - eks-cleanup:
#          requires: [clean-up-app]